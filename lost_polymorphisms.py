#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr 18 15:39:55 2017

@author: ymseah
"""

from bs4 import BeautifulSoup
import numpy as np
import pandas as pd
import re

class ComparePolymorphisms:
    
    def parse_compare_html(self, filepath):
        '''
        Input: filepath to breseq COMPARE html output
        Output: BS4 object generated by BeautifulSoup and Python HTML parser.
        '''
        bs_object = BeautifulSoup(open(filepath), 'html.parser')
        return bs_object

    def get_generation_frequencies(self, data_html_object):
        '''
        Input: compare html object parsed by BeautifulSoup
        Output: dictionary of mutation frequencies across generations
        Key: (reference genome ID, position of mutation)
        Value: [mutation, ancestor frequency, generation 100 f, gen 300 f, gen 500 f, gen 780 f, gen 1000 f]
        '''
        table_cells = data_html_object.body.find_all('td')
        generation_frequencies_dict = {}
        for cell in table_cells:
            if re.match('NC_', str(cell.string)):
                position = cell.next_sibling.next_sibling.next_sibling
                clean_position = int(re.sub(',', '', position.string))
                gen_freqs_key = (cell.string, clean_position)
                mutation = position.next_sibling.next_sibling.next_sibling
                freq_ancestor = mutation.next_sibling.next_sibling.next_sibling
                freq_gen100 = freq_ancestor.next_sibling
                freq_gen300 = freq_gen100.next_sibling
                freq_gen500 = freq_gen300.next_sibling
                freq_gen780 = freq_gen500.next_sibling
                freq_gen1000 = freq_gen780.next_sibling
                gen_freqs_value = [mutation.string, freq_ancestor.string, freq_gen100.string, freq_gen300.string, freq_gen500.string, freq_gen780.string, freq_gen1000.string]
                generation_frequencies_dict[gen_freqs_key] = gen_freqs_value
        return generation_frequencies_dict

    def get_suspect_frequencies(self, generation_frequencies_dict):
        '''
        Input: dictionary of mutation frequencies from get_generation_frequencies()
        Output: dictionary subset of input, only containing values with frequency patterns '100% - 0% - 100%'.
        Key: (reference genome ID, position of mutation)
        Value: [mutation, ancestor frequency, generation 100 f, gen 300 f, gen 500 f, gen 780 f, gen 1000 f]
        '''
        suspect_frequencies_dict = {}
        for key, value in generation_frequencies_dict.items():
            counter = 2
            while counter <= len(value):
                if counter + 1 < len(value):
                    if value[counter] == None:
                        if value[counter - 1] == '100%' or value[counter + 1] == '100%':
                            suspect_frequencies_dict[key] = value
                    elif value[counter] == '100%':
                        if value[counter - 1] == None or value[counter + 1] == None:
                            suspect_frequencies_dict[key] = value
                counter += 2
        return suspect_frequencies_dict

    def annotated_gd_to_df(self, filepath, generation):
        '''
        Input1: path to annotated GenomeDiff file
        Input2: generation sampled
        Output: annotated.gd as a data frame
        '''
        df_from_gd = pd.read_table(filepath, comment='#', names=range(50), dtype=str)
        df_from_gd.insert(0, 'generation', generation)
        return df_from_gd

    def summary_df(self, line_name, all_df_from_gd, output_path):
        '''
        Input1: name of evolution line
        Input2: path to output folder
        Input3: list of data frames for all generations of indicated evolution line
        Output: data frame of subset information from multiple annotated.gd files.
        '''
        summary = pd.concat(all_df_from_gd, ignore_index=True)
        summary.insert(0, 'line', line_name)
        summary.insert(2, 'frequency', 0.0)
        summary.insert(3, 'gene_product', '')
        summary.insert(4, 'gene_position', '')
        summary.insert(5, 'reject', '')
        print('Creating summary data frame for ' + line_name)
        for row in summary.itertuples():
            #check each column
            col_index = 6
            while col_index < 50:
                #1. polymorphism frequencies
                if re.match('frequency=', str(summary.loc[row[0], col_index])):
                    summary.loc[row[0], 'frequency'] = re.sub('frequency=', '', str(summary.loc[row[0], col_index]))
                #2. gene products
                elif re.match('gene_product=', str(summary.loc[row[0], col_index])):
                    summary.loc[row[0], 'gene_product'] = re.sub('gene_product=', '', str(summary.loc[row[0], col_index]))
                #3. polymorphism rejection reasons
                elif re.match('reject=', str(summary.loc[row[0], col_index])):
                    summary.loc[row[0], 'reject'] = re.sub('reject=', '', str(summary.loc[row[0], col_index]))
                #4. gene annotations
                elif re.match('gene_position=', str(summary.loc[row[0], col_index])):
                    summary.loc[row[0], 'gene_position'] = re.sub('gene_position=', '', str(summary.loc[row[0], col_index]))
                col_index += 1
            #set frequencies type to float
            if re.match('1|2|3|4|5|6|7|8|9', str(summary.loc[row[0], 'frequency'])):
                summary.loc[row[0], 'frequency'] = float(summary.loc[row[0], 'frequency'])
            else:
                summary.loc[row[0], 'frequency'] = 0.0
            #set positions (col 4) type to int
            summary.loc[row[0], 4] = int(summary.loc[row[0], 4])
            #set reject col to 'NA' when no reject reason given because row represents evidence, not polymorphism.
            if (summary.loc[row[0], 'reject'] == '') & (summary.loc[row[0], 2] == '.'):
                summary.loc[row[0], 'reject'] = 'NA'
            print(line_name + str(row[0]) + ' done.')
        summary.rename(columns = {0: 'entry_type', 1: 'item_id', 2: 'evidence_ids', 3: 'ref_genome', 4:'position'}, inplace=True)
        summary_subset = summary[['line', 'generation', 'frequency', 'gene_product', 'gene_position', 'reject', 'entry_type', 'item_id', 'evidence_ids', 'ref_genome', 'position']].copy()
        summary_subset.to_csv(output_path + line_name + 'summary_df_subset.csv', index=False)
        return summary_subset

    def get_reject_reasons(self, summary_df_subset, suspect_frequencies_dict):
        '''
        Input1: data frame of all generations of one evolution line with pertinent data (i.e., output from summary_df() method.)
        Input2: dictionary of all suspect frequencies (i.e., output from get_suspect_frequencies() method.)
        Output: modified Input2 with reasons for suspect frequencies looked up from Input1, if available.
        '''
        print('Cross-checking summary data frame and suspect frequencies ...')
        summary_df_subset_mutations = summary_df_subset[(summary_df_subset['entry_type'] == 'SNP') | 
                (summary_df_subset['entry_type'] == 'SUB') | 
                (summary_df_subset['entry_type'] == 'DEL') | 
                (summary_df_subset['entry_type'] == 'INS') | 
                (summary_df_subset['entry_type'] == 'MOB') | 
                (summary_df_subset['entry_type'] == 'AMP') | 
                (summary_df_subset['entry_type'] == 'CON') | 
                (summary_df_subset['entry_type'] == 'INV')]
        for key, value in suspect_frequencies_dict.items():
            row_indices = summary_df_subset_mutations[(summary_df_subset_mutations['ref_genome'] == key[0]) & 
                                                      (summary_df_subset_mutations['position'] == key[1])].index.tolist()
            for row in row_indices:
                reject_reason = summary_df_subset_mutations.loc[row, 'reject']
                generation = summary_df_subset_mutations.loc[row, 'generation']
                entry_type = summary_df_subset_mutations.loc[row, 'entry_type']
                if reject_reason != '':
                    if generation == 100:
                        value[2] = str(value[2]) + ' ' + reject_reason
                    elif generation == 300:
                        value[3] = str(value[3]) + ' ' + reject_reason
                    elif generation == 500:
                        value[4] = str(value[4]) + ' ' + reject_reason
                    elif generation == 780:
                        value[5] = str(value[5]) + ' ' + reject_reason
                    elif generation == 1000:
                        value[6] = str(value[6]) + ' ' + reject_reason
        return suspect_frequencies_dict
    
    def write_frequency_dicts_to_file(self, dictionary, filename_prefix):
        '''
        Input1: dictionary of suspect frequencies (i.e., output from get_suspect_frequencies() or get_reject_reasons().)
        Input2: string prefix for output file name, to identify evolution line etc.
        Output: tab-separated text file of Input1 content.
        '''
        print('Writing to ' + filename_prefix + '_frequencies.tsv ...')
        with open(filename_prefix + '_frequencies.tsv', 'w') as output_file:
            output_file.write('ref_genome\tposition\tmutation\tfreq_anc\tfreq_100\tfreq_300\tfreq_500\tfreq_780\tfreq_1000\n')
            for key, value in dictionary.items():
                output_file.write(str(key[0]) + '\t' + str(key[1]) + '\t' + str(value[0]) + '\t' + str(value[1]) + '\t' + str(value[2]) + '\t' 
                                  + str(value[3]) + '\t' + str(value[4]) + '\t' + str(value[5]) + '\t' + str(value[6]) + '\n')
        print('Done')
        return
            
    def get_rejected_evidence(self, summary_df_subset, suspect_frequencies_dict):
        summary_df_subset_evidence = summary_df_subset[(summary_df_subset['entry_type'] == 'RA') |
                (summary_df_subset['entry_type'] == 'MC') | 
                (summary_df_subset['entry_type'] == 'JC') | 
                (summary_df_subset['entry_type'] == 'UN')]
        rejected_evidence_dict = {}
        for key in suspect_frequencies_dict.items:
            row_indices = summary_df_subset_evidence[(summary_df_subset_evidence['ref_genome'] == key[0]) &
                                                     (summary_df_subset_evidence['position'] == key[1])]
            for row in row_indices:
                reject_reason = summary_df_subset_evidence.loc[row, 'reject']
                evidence_type = summary_df_subset_evidence.loc[row, 'entry_type']
                rejected_evidence_dict[key] = [reject_reason, evidence_type]
        return rejected_evidence_dict
    
    def write_evidence_dicts_to_file(self, dictionary, filename_prefix):
        print('Writing to ' + filename_prefix + '_rejected_evidence.tsv ...')
        with open(filename_prefix + '_rejected_evidence.tsv', 'w') as output_file:
            output_file.write('ref_genome\tposition\treject_reason\tevidence_type\n')
            for key, value in dictionary.items():
                output_file.write(str(key[0]) + '\t' + str(key[1]) + '\t' + str(value[0]) + '\t' + str(value[1]) + '\n')
        print('Done')
        return
